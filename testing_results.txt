ivanrivera@Ivans-MacBook-Pro damien-email-wrestler % poetry run pytest

Poetry could not find a pyproject.toml file in /Users/ivanrivera/Downloads/AWS/DamienPlatform/damien-email-wrestler or its parents
ivanrivera@Ivans-MacBook-Pro damien-email-wrestler % cd damien-cli 
ivanrivera@Ivans-MacBook-Pro damien-cli % poetry run pytest
============================= test session starts ==============================
platform darwin -- Python 3.13.3, pytest-8.3.5, pluggy-1.6.0
rootdir: /Users/ivanrivera/Downloads/AWS/DamienPlatform/damien-email-wrestler/damien-cli
configfile: pyproject.toml
plugins: cov-6.1.1
collected 124 items / 3 errors                                                 

==================================== ERRORS ====================================
______ ERROR collecting tests/features/email_management/test_commands.py _______
tests/features/email_management/test_commands.py:7: in <module>
    from damien_cli import cli_entry
damien_cli/cli_entry.py:11: in <module>
    from damien_cli.features.email_management.commands import emails
damien_cli/features/email_management/commands.py:12: in <module>
    @emails.group()
E   NameError: name 'emails' is not defined
_______ ERROR collecting tests/features/rule_management/test_commands.py _______
tests/features/rule_management/test_commands.py:6: in <module>
    from damien_cli import cli_entry
damien_cli/cli_entry.py:11: in <module>
    from damien_cli.features.email_management.commands import emails
damien_cli/features/email_management/commands.py:12: in <module>
    @emails.group()
E   NameError: name 'emails' is not defined
_ ERROR collecting tests/features/rule_management/test_rules_apply_command.py __
tests/features/rule_management/test_rules_apply_command.py:6: in <module>
    from damien_cli import cli_entry
damien_cli/cli_entry.py:11: in <module>
    from damien_cli.features.email_management.commands import emails
damien_cli/features/email_management/commands.py:12: in <module>
    @emails.group()
E   NameError: name 'emails' is not defined
=========================== short test summary info ============================
ERROR tests/features/email_management/test_commands.py - NameError: name 'emails' is not defined
ERROR tests/features/rule_management/test_commands.py - NameError: name 'emails' is not defined
ERROR tests/features/rule_management/test_rules_apply_command.py - NameError: name 'emails' is not defined
!!!!!!!!!!!!!!!!!!! Interrupted: 3 errors during collection !!!!!!!!!!!!!!!!!!!!
============================== 3 errors in 1.24s ===============================
ivanrivera@Ivans-MacBook-Pro damien-cli % cd ../damien-mcp-server 
ivanrivera@Ivans-MacBook-Pro damien-mcp-server % poetry run pytest      
============================= test session starts ==============================
platform darwin -- Python 3.13.3, pytest-7.4.4, pluggy-1.6.0
rootdir: /Users/ivanrivera/Downloads/AWS/DamienPlatform/damien-email-wrestler/damien-mcp-server
plugins: anyio-3.7.1, asyncio-0.21.2
asyncio: mode=Mode.STRICT
collected 59 items                                                             

test_thread_direct.py s                                                  [  1%]
test/test_draft_tools.py FF....                                          [ 11%]
test/test_settings_tools.py FFFFFFF                                      [ 23%]
test/test_thread_tools.py ........                                       [ 37%]
tests/core/test_config.py ...                                            [ 42%]
tests/core/test_security.py ....                                         [ 49%]
tests/models/test_mcp_protocol.py ...                                    [ 54%]
tests/models/test_tools.py .........                                     [ 69%]
tests/models/test_tools_validation.py ......                             [ 79%]
tests/routers/test_tools.py .                                            [ 81%]
tests/services/test_damien_adapter.py FFFFF                              [ 89%]
tests/services/test_dynamodb_service.py ..                               [ 93%]
tools/test_mcp.py .F.F                                                   [100%]

=================================== FAILURES ===================================
__________________________ test_create_draft_handler ___________________________

mock_damien_adapter_class = <MagicMock name='DamienAdapter' id='4546410688'>

    @pytest.mark.asyncio
    @patch("app.tools.draft_tools.DamienAdapter")
    async def test_create_draft_handler(mock_damien_adapter_class):
        mock_gmail_service = AsyncMock()
        mock_adapter_instance = mock_damien_adapter_class.return_value
        mock_adapter_instance.get_gmail_service = AsyncMock(return_value=mock_gmail_service)
    
        # Mock the gmail_api_service function
        with patch("app.tools.draft_tools.gmail_api_service.create_draft") as mock_create_draft:
            mock_create_draft.return_value = {
                "id": "draft_123",
                "message": {"id": "msg_456"}
            }
    
            params = {
                "to": ["test@example.com"],
                "subject": "Test Subject",
                "body": "Test body content",
                "cc": ["cc@example.com"],
                "bcc": ["bcc@example.com"]
            }
            context = {"session_id": "test_session", "user_id": "test_user"}
    
            result = await draft_tools.create_draft_handler(params, context)
    
>           assert result["id"] == "draft_123"
E           KeyError: 'id'

test/test_draft_tools.py:30: KeyError
___________________ test_create_draft_handler_minimal_params ___________________

mock_damien_adapter_class = <MagicMock name='DamienAdapter' id='4546408672'>

    @pytest.mark.asyncio
    @patch("app.tools.draft_tools.DamienAdapter")
    async def test_create_draft_handler_minimal_params(mock_damien_adapter_class):
        """Test creating draft with only required parameters."""
        mock_gmail_service = AsyncMock()
        mock_adapter_instance = mock_damien_adapter_class.return_value
        mock_adapter_instance.get_gmail_service = AsyncMock(return_value=mock_gmail_service)
    
        with patch("app.tools.draft_tools.gmail_api_service.create_draft") as mock_create_draft:
            mock_create_draft.return_value = {"id": "draft_123"}
    
            params = {
                "to": ["test@example.com"],
                "subject": "Test Subject",
                "body": "Test body content"
            }
            context = {"session_id": "test_session", "user_id": "test_user"}
    
            result = await draft_tools.create_draft_handler(params, context)
    
>           assert result["id"] == "draft_123"
E           KeyError: 'id'

test/test_draft_tools.py:68: KeyError
______________________ test_get_vacation_settings_handler ______________________

mock_damien_adapter_class = <MagicMock name='DamienAdapter' id='4547951456'>

    @pytest.mark.asyncio
    @patch("app.tools.settings_tools.DamienAdapter")
    async def test_get_vacation_settings_handler(mock_damien_adapter_class):
        mock_actual_gmail_service = AsyncMock()
        mock_adapter_instance = mock_damien_adapter_class.return_value
        mock_adapter_instance.get_gmail_service = AsyncMock(return_value=mock_actual_gmail_service)
    
        # Mock the gmail_api_service function
        with patch("app.tools.settings_tools.gmail_api_service.get_vacation_settings") as mock_get_vacation:
            mock_get_vacation.return_value = {"enableAutoReply": True}
    
            params = {}
            context = {"session_id": "test_session", "user_id": "test_user"}
            result = await settings_tools.get_vacation_settings_handler(params, context)
    
>           assert result["enableAutoReply"] is True
E           KeyError: 'enableAutoReply'

test/test_settings_tools.py:20: KeyError
____________________ test_update_vacation_settings_handler _____________________

mock_damien_adapter_class = <MagicMock name='DamienAdapter' id='4547951792'>

    @pytest.mark.asyncio
    @patch("app.tools.settings_tools.DamienAdapter")
    async def test_update_vacation_settings_handler(mock_damien_adapter_class):
        mock_actual_gmail_service = AsyncMock()
        mock_adapter_instance = mock_damien_adapter_class.return_value
        mock_adapter_instance.get_gmail_service = AsyncMock(return_value=mock_actual_gmail_service)
    
        vacation_settings_response = {"enableAutoReply": True}
    
        # Mock the gmail_api_service function
        with patch("app.tools.settings_tools.gmail_api_service.update_vacation_settings") as mock_update_vacation:
            mock_update_vacation.return_value = vacation_settings_response
    
            params = {"enabled": True, "subject": "Test Subject", "body": "Test Body"}
            context = {"session_id": "test_session", "user_id": "test_user"}
            result = await settings_tools.update_vacation_settings_handler(params, context)
    
>           assert result == vacation_settings_response
E           AssertionError: assert {'data': {'en...uccess': True} == {'enableAutoReply': True}
E             Left contains 2 more items:
E             {'data': {'enableAutoReply': True,
E                       'settings_updated': {'enabled': True, 'subject': 'Test Subject'},
E                       'updated_at': '2025-05-26T05:29:35.535450+00:00',
E                       'user_context': {'session_id': 'test_session',
E                                        'user_id': 'test_user'}},
E              'success': True}...
E             
E             ...Full output truncated (3 lines hidden), use '-vv' to show

test/test_settings_tools.py:42: AssertionError
____________ test_update_vacation_settings_handler_validation_error ____________

mock_damien_adapter_class = <MagicMock name='DamienAdapter' id='4547946080'>

    @pytest.mark.asyncio
    @patch("app.tools.settings_tools.DamienAdapter")
    async def test_update_vacation_settings_handler_validation_error(mock_damien_adapter_class):
        """Test that enabling vacation responder without subject/body raises validation error."""
        mock_actual_gmail_service = AsyncMock()
        mock_adapter_instance = mock_damien_adapter_class.return_value
        mock_adapter_instance.get_gmail_service = AsyncMock(return_value=mock_actual_gmail_service)
    
        params = {"enabled": True}  # Missing subject and body
        context = {"session_id": "test_session", "user_id": "test_user"}
    
>       with pytest.raises(Exception) as exc_info:
E       Failed: DID NOT RAISE <class 'Exception'>

test/test_settings_tools.py:56: Failed
________________________ test_get_imap_settings_handler ________________________

mock_damien_adapter_class = <MagicMock name='DamienAdapter' id='4550312016'>

    @pytest.mark.asyncio
    @patch("app.tools.settings_tools.DamienAdapter")
    async def test_get_imap_settings_handler(mock_damien_adapter_class):
        mock_actual_gmail_service = AsyncMock()
        mock_adapter_instance = mock_damien_adapter_class.return_value
        mock_adapter_instance.get_gmail_service = AsyncMock(return_value=mock_actual_gmail_service)
    
        # Mock the gmail_api_service function
        with patch("app.tools.settings_tools.gmail_api_service.get_imap_settings") as mock_get_imap:
            mock_get_imap.return_value = {"enabled": True}
    
            params = {}
            context = {"session_id": "test_session", "user_id": "test_user"}
            result = await settings_tools.get_imap_settings_handler(params, context)
    
>           assert result["enabled"] is True
E           KeyError: 'enabled'

test/test_settings_tools.py:76: KeyError
______________________ test_update_imap_settings_handler _______________________

mock_damien_adapter_class = <MagicMock name='DamienAdapter' id='4550315040'>

    @pytest.mark.asyncio
    @patch("app.tools.settings_tools.DamienAdapter")
    async def test_update_imap_settings_handler(mock_damien_adapter_class):
        mock_actual_gmail_service = AsyncMock()
        mock_adapter_instance = mock_damien_adapter_class.return_value
        mock_adapter_instance.get_gmail_service = AsyncMock(return_value=mock_actual_gmail_service)
    
        imap_settings_response = {"enabled": True}
    
        # Mock the gmail_api_service function
        with patch("app.tools.settings_tools.gmail_api_service.update_imap_settings") as mock_update_imap:
            mock_update_imap.return_value = imap_settings_response
    
            params = {"enabled": True, "auto_expunge": False, "expunge_behavior": "archive"}
            context = {"session_id": "test_session", "user_id": "test_user"}
            result = await settings_tools.update_imap_settings_handler(params, context)
    
>           assert result == imap_settings_response
E           AssertionError: assert {'data': {'en...uccess': True} == {'enabled': True}
E             Left contains 2 more items:
E             {'data': {'enabled': True,
E                       'updated_at': '2025-05-26T05:29:35.562563+00:00',
E                       'user_context': {'session_id': 'test_session',
E                                        'user_id': 'test_user'}},
E              'success': True}
E             Right contains 1 more item:
E             {'enabled': True}
E             Use -v to get more diff

test/test_settings_tools.py:96: AssertionError
________________________ test_get_pop_settings_handler _________________________

mock_damien_adapter_class = <MagicMock name='DamienAdapter' id='4547945072'>

    @pytest.mark.asyncio
    @patch("app.tools.settings_tools.DamienAdapter")
    async def test_get_pop_settings_handler(mock_damien_adapter_class):
        mock_actual_gmail_service = AsyncMock()
        mock_adapter_instance = mock_damien_adapter_class.return_value
        mock_adapter_instance.get_gmail_service = AsyncMock(return_value=mock_actual_gmail_service)
    
        # Mock the gmail_api_service function
        with patch("app.tools.settings_tools.gmail_api_service.get_pop_settings") as mock_get_pop:
            mock_get_pop.return_value = {"accessWindow": "all_mail"}
    
            params = {}
            context = {"session_id": "test_session", "user_id": "test_user"}
            result = await settings_tools.get_pop_settings_handler(params, context)
    
>           assert result["accessWindow"] == "all_mail"
E           KeyError: 'accessWindow'

test/test_settings_tools.py:114: KeyError
_______________________ test_update_pop_settings_handler _______________________

mock_damien_adapter_class = <MagicMock name='DamienAdapter' id='4547947424'>

    @pytest.mark.asyncio
    @patch("app.tools.settings_tools.DamienAdapter")
    async def test_update_pop_settings_handler(mock_damien_adapter_class):
        mock_actual_gmail_service = AsyncMock()
        mock_adapter_instance = mock_damien_adapter_class.return_value
        mock_adapter_instance.get_gmail_service = AsyncMock(return_value=mock_actual_gmail_service)
    
        pop_settings_response = {"accessWindow": "all_mail", "disposition": "leaveInInbox"}
    
        # Mock the gmail_api_service function
        with patch("app.tools.settings_tools.gmail_api_service.update_pop_settings") as mock_update_pop:
            mock_update_pop.return_value = pop_settings_response
    
            params = {"access_window": "allMail", "disposition": "leaveInInbox"}
            context = {"session_id": "test_session", "user_id": "test_user"}
            result = await settings_tools.update_pop_settings_handler(params, context)
    
>           assert result == pop_settings_response
E           AssertionError: assert {'data': {'ac...uccess': True} == {'accessWindo...leaveInInbox'}
E             Left contains 2 more items:
E             {'data': {'accessWindow': 'all_mail',
E                       'disposition': 'leaveInInbox',
E                       'updated_at': '2025-05-26T05:29:35.587599+00:00',
E                       'user_context': {'session_id': 'test_session',
E                                        'user_id': 'test_user'}},
E              'success': True}...
E             
E             ...Full output truncated (3 lines hidden), use '-vv' to show

test/test_settings_tools.py:134: AssertionError
_________________________ test_ensure_g_service_client _________________________

mock_settings = <MagicMock name='settings' id='4550312016'>
adapter = <app.services.damien_adapter.DamienAdapter object at 0x10f384980>
mock_gmail_module = <MagicMock id='4547943392'>

    @patch("app.services.damien_adapter.settings")
    async def test_ensure_g_service_client(mock_settings, adapter, mock_gmail_module):
        """Test _ensure_g_service_client method."""
        # Test when client is already cached
        existing_client = adapter._g_service_client
        result = await adapter._ensure_g_service_client()
        assert result is existing_client
        mock_gmail_module.get_g_service_client_from_token.assert_not_called()
    
        # Test when client needs to be initialized
        adapter._g_service_client = None
        mock_settings.gmail_token_path = "token_path"
        mock_settings.gmail_credentials_path = "creds_path"
        mock_settings.gmail_scopes = ["scope1", "scope2"]
    
        result = await adapter._ensure_g_service_client()
    
>       mock_gmail_module.get_g_service_client_from_token.assert_called_once_with(
            token_file_path_str="token_path",
            credentials_file_path_str="creds_path",
            scopes=["scope1", "scope2"]
        )

tests/services/test_damien_adapter.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='mock.get_g_service_client_from_token' id='4547949104'>
args = ()
kwargs = {'credentials_file_path_str': 'creds_path', 'scopes': ['scope1', 'scope2'], 'token_file_path_str': 'token_path'}
msg = "Expected 'get_g_service_client_from_token' to be called once. Called 0 times."

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'get_g_service_client_from_token' to be called once. Called 0 times.

/usr/local/Cellar/python@3.13/3.13.3_1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:990: AssertionError
---------------------------- Captured stdout setup -----------------------------
{"timestamp": 1748237375.711243, "level": "INFO", "name": "damien_cli", "service_name": "damien-cli", "module": "logging_setup", "function": "setup_logging", "line_number": 57, "message": "Successfully added FileHandler for /Users/ivanrivera/Downloads/AWS/DamienPlatform/damien-email-wrestler/damien-cli/data/damien_session.log", "taskName": null}
{"timestamp": 1748237375.712179, "level": "INFO", "name": "damien_cli", "service_name": "damien-cli", "module": "logging_setup", "function": "setup_logging", "line_number": 73, "message": "Logging initialized. Log file: /Users/ivanrivera/Downloads/AWS/DamienPlatform/damien-email-wrestler/damien-cli/data/damien_session.log", "taskName": null}
------------------------------ Captured log setup ------------------------------
INFO     damien_cli:logging_setup.py:57 Successfully added FileHandler for /Users/ivanrivera/Downloads/AWS/DamienPlatform/damien-email-wrestler/damien-cli/data/damien_session.log
INFO     damien_cli:logging_setup.py:73 Logging initialized. Log file: /Users/ivanrivera/Downloads/AWS/DamienPlatform/damien-email-wrestler/damien-cli/data/damien_session.log
____________________________ test_list_emails_tool _____________________________

adapter = <app.services.damien_adapter.DamienAdapter object at 0x10f355310>
mock_gmail_module = <MagicMock id='4550318400'>

    async def test_list_emails_tool(adapter, mock_gmail_module):
        """Test list_emails_tool method."""
        # Patch _ensure_g_service_client to avoid mocking configuration
        adapter._ensure_g_service_client = AsyncMock(return_value=MagicMock())
    
        # Test with default parameters
        result = await adapter.list_emails_tool()
    
>       mock_gmail_module.list_messages.assert_called_once_with(
            service=adapter._ensure_g_service_client.return_value,
            query_string=None,
            max_results=10,
            page_token=None,
            include_headers=None
        )

tests/services/test_damien_adapter.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='mock.list_messages' id='4550319408'>, args = ()
kwargs = {'include_headers': None, 'max_results': 10, 'page_token': None, 'query_string': None, ...}
msg = "Expected 'list_messages' to be called once. Called 0 times."

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'list_messages' to be called once. Called 0 times.

/usr/local/Cellar/python@3.13/3.13.3_1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:990: AssertionError
---------------------------- Captured stdout setup -----------------------------
{"timestamp": 1748237375.770795, "level": "INFO", "name": "damien_cli", "service_name": "damien-cli", "module": "logging_setup", "function": "setup_logging", "line_number": 57, "message": "Successfully added FileHandler for /Users/ivanrivera/Downloads/AWS/DamienPlatform/damien-email-wrestler/damien-cli/data/damien_session.log", "taskName": null}
{"timestamp": 1748237375.771057, "level": "INFO", "name": "damien_cli", "service_name": "damien-cli", "module": "logging_setup", "function": "setup_logging", "line_number": 73, "message": "Logging initialized. Log file: /Users/ivanrivera/Downloads/AWS/DamienPlatform/damien-email-wrestler/damien-cli/data/damien_session.log", "taskName": null}
------------------------------ Captured log setup ------------------------------
INFO     damien_cli:logging_setup.py:57 Successfully added FileHandler for /Users/ivanrivera/Downloads/AWS/DamienPlatform/damien-email-wrestler/damien-cli/data/damien_session.log
INFO     damien_cli:logging_setup.py:73 Logging initialized. Log file: /Users/ivanrivera/Downloads/AWS/DamienPlatform/damien-email-wrestler/damien-cli/data/damien_session.log
_________________________ test_get_email_details_tool __________________________

adapter = <app.services.damien_adapter.DamienAdapter object at 0x10c3b1090>
mock_gmail_module = <MagicMock id='4550312352'>

    async def test_get_email_details_tool(adapter, mock_gmail_module):
        """Test get_email_details_tool method."""
        adapter._ensure_g_service_client = AsyncMock(return_value=MagicMock())
    
        # Test with default format
        result = await adapter.get_email_details_tool(message_id="msg_id_123")
    
>       mock_gmail_module.get_message_details.assert_called_once_with(
            service=adapter._ensure_g_service_client.return_value,
            message_id="msg_id_123",
            email_format="metadata",
            include_headers=None
        )

tests/services/test_damien_adapter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='mock.get_message_details' id='4550313360'>, args = ()
kwargs = {'email_format': 'metadata', 'include_headers': None, 'message_id': 'msg_id_123', 'service': <MagicMock id='4547948768'>}
msg = "Expected 'get_message_details' to be called once. Called 0 times."

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'get_message_details' to be called once. Called 0 times.

/usr/local/Cellar/python@3.13/3.13.3_1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:990: AssertionError
---------------------------- Captured stdout setup -----------------------------
{"timestamp": 1748237375.822151, "level": "INFO", "name": "damien_cli", "service_name": "damien-cli", "module": "logging_setup", "function": "setup_logging", "line_number": 57, "message": "Successfully added FileHandler for /Users/ivanrivera/Downloads/AWS/DamienPlatform/damien-email-wrestler/damien-cli/data/damien_session.log", "taskName": null}
{"timestamp": 1748237375.822376, "level": "INFO", "name": "damien_cli", "service_name": "damien-cli", "module": "logging_setup", "function": "setup_logging", "line_number": 73, "message": "Logging initialized. Log file: /Users/ivanrivera/Downloads/AWS/DamienPlatform/damien-email-wrestler/damien-cli/data/damien_session.log", "taskName": null}
------------------------------ Captured log setup ------------------------------
INFO     damien_cli:logging_setup.py:57 Successfully added FileHandler for /Users/ivanrivera/Downloads/AWS/DamienPlatform/damien-email-wrestler/damien-cli/data/damien_session.log
INFO     damien_cli:logging_setup.py:73 Logging initialized. Log file: /Users/ivanrivera/Downloads/AWS/DamienPlatform/damien-email-wrestler/damien-cli/data/damien_session.log
____________________________ test_trash_emails_tool ____________________________

adapter = <app.services.damien_adapter.DamienAdapter object at 0x10f3a89d0>
mock_gmail_module = <MagicMock id='4547941040'>

    async def test_trash_emails_tool(adapter, mock_gmail_module):
        """Test trash_emails_tool method."""
        adapter._ensure_g_service_client = AsyncMock(return_value=MagicMock())
    
        # Test with valid message IDs
        result = await adapter.trash_emails_tool(message_ids=["msg1", "msg2"])
    
>       mock_gmail_module.batch_trash_messages.assert_called_once_with(
            service=adapter._ensure_g_service_client.return_value,
            message_ids=["msg1", "msg2"]
        )

tests/services/test_damien_adapter.py:170: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='mock.batch_trash_messages' id='4547948096'>, args = ()
kwargs = {'message_ids': ['msg1', 'msg2'], 'service': <MagicMock id='4547943728'>}
msg = "Expected 'batch_trash_messages' to be called once. Called 0 times."

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'batch_trash_messages' to be called once. Called 0 times.

/usr/local/Cellar/python@3.13/3.13.3_1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:990: AssertionError
---------------------------- Captured stdout setup -----------------------------
{"timestamp": 1748237375.868895, "level": "INFO", "name": "damien_cli", "service_name": "damien-cli", "module": "logging_setup", "function": "setup_logging", "line_number": 57, "message": "Successfully added FileHandler for /Users/ivanrivera/Downloads/AWS/DamienPlatform/damien-email-wrestler/damien-cli/data/damien_session.log", "taskName": null}
{"timestamp": 1748237375.8691258, "level": "INFO", "name": "damien_cli", "service_name": "damien-cli", "module": "logging_setup", "function": "setup_logging", "line_number": 73, "message": "Logging initialized. Log file: /Users/ivanrivera/Downloads/AWS/DamienPlatform/damien-email-wrestler/damien-cli/data/damien_session.log", "taskName": null}
------------------------------ Captured log setup ------------------------------
INFO     damien_cli:logging_setup.py:57 Successfully added FileHandler for /Users/ivanrivera/Downloads/AWS/DamienPlatform/damien-email-wrestler/damien-cli/data/damien_session.log
INFO     damien_cli:logging_setup.py:73 Logging initialized. Log file: /Users/ivanrivera/Downloads/AWS/DamienPlatform/damien-email-wrestler/damien-cli/data/damien_session.log
----------------------------- Captured stdout call -----------------------------
Damien preparing to move 2 messages to Trash.
____________________________ test_label_emails_tool ____________________________

adapter = <app.services.damien_adapter.DamienAdapter object at 0x10f3a83e0>
mock_gmail_module = <MagicMock id='4552086192'>

    async def test_label_emails_tool(adapter, mock_gmail_module):
        """Test label_emails_tool method."""
        adapter._ensure_g_service_client = AsyncMock(return_value=MagicMock())
    
        # Test with add labels
        result = await adapter.label_emails_tool(
            message_ids=["msg1"],
            add_label_names=["Label1", "Label2"],
            remove_label_names=None
        )
    
>       mock_gmail_module.batch_modify_message_labels.assert_called_once_with(
            service=adapter._ensure_g_service_client.return_value,
            message_ids=["msg1"],
            add_label_names=["Label1", "Label2"],
            remove_label_names=None
        )

tests/services/test_damien_adapter.py:201: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='mock.batch_modify_message_labels' id='4552088208'>
args = ()
kwargs = {'add_label_names': ['Label1', 'Label2'], 'message_ids': ['msg1'], 'remove_label_names': None, 'service': <MagicMock id='4552092576'>}
msg = "Expected 'batch_modify_message_labels' to be called once. Called 0 times."

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'batch_modify_message_labels' to be called once. Called 0 times.

/usr/local/Cellar/python@3.13/3.13.3_1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:990: AssertionError
---------------------------- Captured stdout setup -----------------------------
{"timestamp": 1748237375.9133701, "level": "INFO", "name": "damien_cli", "service_name": "damien-cli", "module": "logging_setup", "function": "setup_logging", "line_number": 57, "message": "Successfully added FileHandler for /Users/ivanrivera/Downloads/AWS/DamienPlatform/damien-email-wrestler/damien-cli/data/damien_session.log", "taskName": null}
{"timestamp": 1748237375.9136288, "level": "INFO", "name": "damien_cli", "service_name": "damien-cli", "module": "logging_setup", "function": "setup_logging", "line_number": 73, "message": "Logging initialized. Log file: /Users/ivanrivera/Downloads/AWS/DamienPlatform/damien-email-wrestler/damien-cli/data/damien_session.log", "taskName": null}
------------------------------ Captured log setup ------------------------------
INFO     damien_cli:logging_setup.py:57 Successfully added FileHandler for /Users/ivanrivera/Downloads/AWS/DamienPlatform/damien-email-wrestler/damien-cli/data/damien_session.log
INFO     damien_cli:logging_setup.py:73 Logging initialized. Log file: /Users/ivanrivera/Downloads/AWS/DamienPlatform/damien-email-wrestler/damien-cli/data/damien_session.log
----------------------------- Captured stdout call -----------------------------
Damien Warning: Label name 'Label1' not found, skipping for 'add'.
Damien Warning: Label name 'Label2' not found, skipping for 'add'.
________________________________ test_protected ________________________________

    def test_protected():
        """Test the protected endpoint."""
        url = f"{BASE_URL}/mcp/protected-test"
        response = requests.get(url, headers=HEADERS)
        print(f"Protected endpoint: {response.status_code}")
        print(response.json())
        print()
>       assert response.status_code == 200
E       assert 404 == 200
E        +  where 404 = <Response [404]>.status_code

tools/test_mcp.py:36: AssertionError
----------------------------- Captured stdout call -----------------------------
Protected endpoint: 404
{'detail': 'Not Found'}

_______________________________ test_list_emails _______________________________

    def test_list_emails():
        """Test the list_emails tool."""
        url = f"{BASE_URL}/mcp/execute_tool"
        payload = {
            "tool_name": "damien_list_emails",
            "params": {
                "query": "is:unread",
                "max_results": 3
            },
            "session_id": str(uuid.uuid4())
        }
    
        print(f"Testing list_emails with payload:")
        print(json.dumps(payload, indent=2))
        print()
    
        response = requests.post(url, headers=HEADERS, json=payload)
        print(f"Response status: {response.status_code}")
    
        if response.status_code == 200:
            result = response.json()
            print(f"Tool result ID: {result.get('tool_result_id')}")
            print(f"Is error: {result.get('is_error')}")
            if result.get('is_error'):
                print(f"Error: {result.get('error')}")
            else:
                # Just show summary of the output
                output = result.get('output', {})
                email_summaries = output.get('email_summaries', [])
                print(f"Retrieved {len(email_summaries)} emails")
                for i, email in enumerate(email_summaries, 1):
                    print(f"  Email {i}: ID={email.get('id')} Subject={email.get('subject', 'N/A')}")
                print(f"Next page token: {output.get('next_page_token')}")
        else:
            print(f"Error: {response.text}")
    
        print()
>       assert response.status_code == 200
E       assert 422 == 200
E        +  where 422 = <Response [422]>.status_code

tools/test_mcp.py:84: AssertionError
----------------------------- Captured stdout call -----------------------------
Testing list_emails with payload:
{
  "tool_name": "damien_list_emails",
  "params": {
    "query": "is:unread",
    "max_results": 3
  },
  "session_id": "9ae216a4-6fb3-4531-abfa-64dfbc07a9d8"
}

Response status: 422
Error: {"detail":[{"type":"missing","loc":["body","input"],"msg":"Field required","input":{"tool_name":"damien_list_emails","params":{"query":"is:unread","max_results":3},"session_id":"9ae216a4-6fb3-4531-abfa-64dfbc07a9d8"},"url":"https://errors.pydantic.dev/2.11/v/missing"}]}

=============================== warnings summary ===============================
../../../../../Library/Caches/pypoetry/virtualenvs/damienmcp-server-zcrDjA6J-py3.13/lib/python3.13/site-packages/botocore/auth.py:419
../../../../../Library/Caches/pypoetry/virtualenvs/damienmcp-server-zcrDjA6J-py3.13/lib/python3.13/site-packages/botocore/auth.py:419
  /Users/ivanrivera/Library/Caches/pypoetry/virtualenvs/damienmcp-server-zcrDjA6J-py3.13/lib/python3.13/site-packages/botocore/auth.py:419: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    datetime_now = datetime.datetime.utcnow()

../../../../../Library/Caches/pypoetry/virtualenvs/damienmcp-server-zcrDjA6J-py3.13/lib/python3.13/site-packages/pydantic/fields.py:1045
  /Users/ivanrivera/Library/Caches/pypoetry/virtualenvs/damienmcp-server-zcrDjA6J-py3.13/lib/python3.13/site-packages/pydantic/fields.py:1045: PydanticDeprecatedSince20: `min_items` is deprecated and will be removed, use `min_length` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warn('`min_items` is deprecated and will be removed, use `min_length` instead', DeprecationWarning)

test_thread_direct.py::test_thread_functionality
  /Users/ivanrivera/Library/Caches/pypoetry/virtualenvs/damienmcp-server-zcrDjA6J-py3.13/lib/python3.13/site-packages/_pytest/python.py:183: PytestUnhandledCoroutineWarning: async def functions are not natively supported and have been skipped.
  You need to install a suitable plugin for your async framework, for example:
    - anyio
    - pytest-asyncio
    - pytest-tornasync
    - pytest-trio
    - pytest-twisted
    warnings.warn(PytestUnhandledCoroutineWarning(msg.format(nodeid)))

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED test/test_draft_tools.py::test_create_draft_handler - KeyError: 'id'
FAILED test/test_draft_tools.py::test_create_draft_handler_minimal_params - KeyError: 'id'
FAILED test/test_settings_tools.py::test_get_vacation_settings_handler - KeyError: 'enableAutoReply'
FAILED test/test_settings_tools.py::test_update_vacation_settings_handler - AssertionError: assert {'data': {'en...uccess': True} == {'enableAutoReply'...
FAILED test/test_settings_tools.py::test_update_vacation_settings_handler_validation_error - Failed: DID NOT RAISE <class 'Exception'>
FAILED test/test_settings_tools.py::test_get_imap_settings_handler - KeyError: 'enabled'
FAILED test/test_settings_tools.py::test_update_imap_settings_handler - AssertionError: assert {'data': {'en...uccess': True} == {'enabled': True}
FAILED test/test_settings_tools.py::test_get_pop_settings_handler - KeyError: 'accessWindow'
FAILED test/test_settings_tools.py::test_update_pop_settings_handler - AssertionError: assert {'data': {'ac...uccess': True} == {'accessWindo...le...
FAILED tests/services/test_damien_adapter.py::test_ensure_g_service_client - AssertionError: Expected 'get_g_service_client_from_token' to be called onc...
FAILED tests/services/test_damien_adapter.py::test_list_emails_tool - AssertionError: Expected 'list_messages' to be called once. Called 0 times.
FAILED tests/services/test_damien_adapter.py::test_get_email_details_tool - AssertionError: Expected 'get_message_details' to be called once. Called 0 ...
FAILED tests/services/test_damien_adapter.py::test_trash_emails_tool - AssertionError: Expected 'batch_trash_messages' to be called once. Called 0...
FAILED tests/services/test_damien_adapter.py::test_label_emails_tool - AssertionError: Expected 'batch_modify_message_labels' to be called once. C...
FAILED tools/test_mcp.py::test_protected - assert 404 == 200
FAILED tools/test_mcp.py::test_list_emails - assert 422 == 200
============= 16 failed, 42 passed, 1 skipped, 4 warnings in 3.59s =============
ivanrivera@Ivans-MacBook-Pro damien-mcp-server % cd ../damien-smithery-adapter 
ivanrivera@Ivans-MacBook-Pro damien-smithery-adapter % poetry run pytest